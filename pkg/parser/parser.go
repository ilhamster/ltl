// Code generated by goyacc - DO NOT EDIT.

// Copyright 2020 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
package parser

import __yyfmt__ "fmt"

import (
	"ltl/pkg/ltl"
	ops "ltl/pkg/operators"
)

type yySymType struct {
	yys int
	op  ltl.Operator
	num int64
}

type yyXError struct {
	state, xsym int
}

const (
	yyDefault  = 57361
	yyEofCode  = 57344
	AND        = 57358
	EVENTUALLY = 57352
	GLOBALLY   = 57351
	LIMIT      = 57350
	LPAREN     = 57348
	MATCHER    = 57346
	NEXT       = 57359
	NOT        = 57360
	NUM        = 57347
	OR         = 57357
	RELEASE    = 57354
	RPAREN     = 57349
	SEQUENCE   = 57356
	THEN       = 57355
	UNTIL      = 57353
	yyErrCode  = 57345

	yyMaxDepth = 200
	yyTabOfs   = -14
)

var (
	yyPrec = map[int]int{
		LIMIT:      0,
		GLOBALLY:   1,
		EVENTUALLY: 2,
		UNTIL:      3,
		RELEASE:    3,
		THEN:       4,
		SEQUENCE:   4,
		OR:         5,
		AND:        5,
		NEXT:       6,
		NOT:        6,
	}

	yyXLAT = map[int]int{
		57344: 0,  // $end (14x)
		57358: 1,  // AND (14x)
		57350: 2,  // LIMIT (14x)
		57357: 3,  // OR (14x)
		57354: 4,  // RELEASE (14x)
		57355: 5,  // THEN (14x)
		57353: 6,  // UNTIL (14x)
		57349: 7,  // RPAREN (13x)
		57352: 8,  // EVENTUALLY (11x)
		57362: 9,  // expr (11x)
		57351: 10, // GLOBALLY (11x)
		57348: 11, // LPAREN (11x)
		57346: 12, // MATCHER (11x)
		57359: 13, // NEXT (11x)
		57360: 14, // NOT (11x)
		57363: 15, // line (1x)
		57347: 16, // NUM (1x)
		57361: 17, // $default (0x)
		57345: 18, // error (0x)
		57356: 19, // SEQUENCE (0x)
	}

	yySymNames = []string{
		"$end",
		"AND",
		"LIMIT",
		"OR",
		"RELEASE",
		"THEN",
		"UNTIL",
		"RPAREN",
		"EVENTUALLY",
		"expr",
		"GLOBALLY",
		"LPAREN",
		"MATCHER",
		"NEXT",
		"NOT",
		"line",
		"NUM",
		"$default",
		"error",
		"SEQUENCE",
	}

	yyTokenLiteralStrings = map[int]string{}

	yyReductions = map[int]struct{ xsym, components int }{
		0:  {0, 1},
		1:  {15, 1},
		2:  {9, 3},
		3:  {9, 1},
		4:  {9, 2},
		5:  {9, 2},
		6:  {9, 2},
		7:  {9, 2},
		8:  {9, 3},
		9:  {9, 3},
		10: {9, 3},
		11: {9, 3},
		12: {9, 3},
		13: {9, 3},
	}

	yyXErrors = map[yyXError]string{}

	yyParseTab = [27][]uint8{
		// 0
		{8: 21, 16, 22, 17, 18, 20, 19, 15},
		{14},
		{13, 26, 24, 25, 28, 29, 27},
		{8: 21, 39, 22, 17, 18, 20, 19},
		{11, 11, 11, 11, 11, 11, 11, 11},
		// 5
		{8: 21, 38, 22, 17, 18, 20, 19},
		{8: 21, 37, 22, 17, 18, 20, 19},
		{8: 21, 36, 22, 17, 18, 20, 19},
		{8: 21, 23, 22, 17, 18, 20, 19},
		{7, 26, 7, 25, 28, 29, 27, 7},
		// 10
		{16: 35},
		{8: 21, 34, 22, 17, 18, 20, 19},
		{8: 21, 33, 22, 17, 18, 20, 19},
		{8: 21, 32, 22, 17, 18, 20, 19},
		{8: 21, 31, 22, 17, 18, 20, 19},
		// 15
		{8: 21, 30, 22, 17, 18, 20, 19},
		{1, 26, 1, 25, 1, 1, 1, 1},
		{2, 26, 2, 25, 2, 29, 2, 2},
		{3, 26, 3, 25, 3, 29, 3, 3},
		{4, 4, 4, 4, 4, 4, 4, 4},
		// 20
		{5, 5, 5, 5, 5, 5, 5, 5},
		{6, 6, 6, 6, 6, 6, 6, 6},
		{8, 26, 8, 25, 28, 29, 27, 8},
		{9, 9, 9, 9, 9, 9, 9, 9},
		{10, 10, 10, 10, 10, 10, 10, 10},
		// 25
		{1: 26, 24, 25, 28, 29, 27, 40},
		{12, 12, 12, 12, 12, 12, 12, 12},
	}
)

var yyDebug = 0

type yyLexer interface {
	Lex(lval *yySymType) int
	Error(s string)
}

type yyLexerEx interface {
	yyLexer
	Reduced(rule, state int, lval *yySymType) bool
}

func yySymName(c int) (s string) {
	x, ok := yyXLAT[c]
	if ok {
		return yySymNames[x]
	}

	if c < 0x7f {
		return __yyfmt__.Sprintf("%q", c)
	}

	return __yyfmt__.Sprintf("%d", c)
}

func yylex1(yylex yyLexer, lval *yySymType) (n int) {
	n = yylex.Lex(lval)
	if n <= 0 {
		n = yyEofCode
	}
	if yyDebug >= 3 {
		__yyfmt__.Printf("\nlex %s(%#x %d), lval: %+v\n", yySymName(n), n, n, lval)
	}
	return n
}

func yyParse(yylex yyLexer) int {
	const yyError = 18

	yyEx, _ := yylex.(yyLexerEx)
	var yyn int
	var yylval yySymType
	var yyVAL yySymType
	yyS := make([]yySymType, 200)

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	yyerrok := func() {
		if yyDebug >= 2 {
			__yyfmt__.Printf("yyerrok()\n")
		}
		Errflag = 0
	}
	_ = yyerrok
	yystate := 0
	yychar := -1
	var yyxchar int
	var yyshift int
	yyp := -1
	goto yystack

ret0:
	return 0

ret1:
	return 1

yystack:
	/* put a state and value onto the stack */
	yyp++
	if yyp >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyS[yyp] = yyVAL
	yyS[yyp].yys = yystate

yynewstate:
	if yychar < 0 {
		yylval.yys = yystate
		yychar = yylex1(yylex, &yylval)
		var ok bool
		if yyxchar, ok = yyXLAT[yychar]; !ok {
			yyxchar = len(yySymNames) // > tab width
		}
	}
	if yyDebug >= 4 {
		var a []int
		for _, v := range yyS[:yyp+1] {
			a = append(a, v.yys)
		}
		__yyfmt__.Printf("state stack %v\n", a)
	}
	row := yyParseTab[yystate]
	yyn = 0
	if yyxchar < len(row) {
		if yyn = int(row[yyxchar]); yyn != 0 {
			yyn += yyTabOfs
		}
	}
	switch {
	case yyn > 0: // shift
		yychar = -1
		yyVAL = yylval
		yystate = yyn
		yyshift = yyn
		if yyDebug >= 2 {
			__yyfmt__.Printf("shift, and goto state %d\n", yystate)
		}
		if Errflag > 0 {
			Errflag--
		}
		goto yystack
	case yyn < 0: // reduce
	case yystate == 1: // accept
		if yyDebug >= 2 {
			__yyfmt__.Println("accept")
		}
		goto ret0
	}

	if yyn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			if yyDebug >= 1 {
				__yyfmt__.Printf("no action for %s in state %d\n", yySymName(yychar), yystate)
			}
			msg, ok := yyXErrors[yyXError{yystate, yyxchar}]
			if !ok {
				msg, ok = yyXErrors[yyXError{yystate, -1}]
			}
			if !ok && yyshift != 0 {
				msg, ok = yyXErrors[yyXError{yyshift, yyxchar}]
			}
			if !ok {
				msg, ok = yyXErrors[yyXError{yyshift, -1}]
			}
			if yychar > 0 {
				ls := yyTokenLiteralStrings[yychar]
				if ls == "" {
					ls = yySymName(yychar)
				}
				if ls != "" {
					switch {
					case msg == "":
						msg = __yyfmt__.Sprintf("unexpected %s", ls)
					default:
						msg = __yyfmt__.Sprintf("unexpected %s, %s", ls, msg)
					}
				}
			}
			if msg == "" {
				msg = "syntax error"
			}
			yylex.Error(msg)
			Nerrs++
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for yyp >= 0 {
				row := yyParseTab[yyS[yyp].yys]
				if yyError < len(row) {
					yyn = int(row[yyError]) + yyTabOfs
					if yyn > 0 { // hit
						if yyDebug >= 2 {
							__yyfmt__.Printf("error recovery found error shift in state %d\n", yyS[yyp].yys)
						}
						yystate = yyn /* simulate a shift of "error" */
						goto yystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if yyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", yyS[yyp].yys)
				}
				yyp--
			}
			/* there is no state on the stack with an error shift ... abort */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery failed\n")
			}
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if yyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", yySymName(yychar))
			}
			if yychar == yyEofCode {
				goto ret1
			}

			yychar = -1
			goto yynewstate /* try again in the same state */
		}
	}

	r := -yyn
	x0 := yyReductions[r]
	x, n := x0.xsym, x0.components
	yypt := yyp
	_ = yypt // guard against "declared and not used"

	yyp -= n
	if yyp+1 >= len(yyS) {
		nyys := make([]yySymType, len(yyS)*2)
		copy(nyys, yyS)
		yyS = nyys
	}
	yyVAL = yyS[yyp+1]

	/* consult goto table to find next state */
	exState := yystate
	yystate = int(yyParseTab[yyS[yyp].yys][x]) + yyTabOfs
	/* reduction by production r */
	if yyDebug >= 2 {
		__yyfmt__.Printf("reduce using rule %v (%s), and goto state %d\n", r, yySymNames[x], yystate)
	}

	switch r {
	case 1:
		{
			setOp(yylex, yyS[yypt-0].op)
		}
	case 2:
		{
			yyVAL.op = yyS[yypt-1].op
		}
	case 3:
		{
			yyVAL.op = yyS[yypt-0].op
		}
	case 4:
		{
			yyVAL.op = ops.Not(yyS[yypt-0].op)
		}
	case 5:
		{
			yyVAL.op = ops.Next(yyS[yypt-0].op)
		}
	case 6:
		{
			yyVAL.op = ops.Eventually(yyS[yypt-0].op)
		}
	case 7:
		{
			yyVAL.op = ops.Globally(yyS[yypt-0].op)
		}
	case 8:
		{
			yyVAL.op = ops.Limit(yyS[yypt-0].num, yyS[yypt-2].op)
		}
	case 9:
		{
			yyVAL.op = ops.Or(yyS[yypt-2].op, yyS[yypt-0].op)
		}
	case 10:
		{
			yyVAL.op = ops.And(yyS[yypt-2].op, yyS[yypt-0].op)
		}
	case 11:
		{
			yyVAL.op = ops.Until(yyS[yypt-2].op, yyS[yypt-0].op)
		}
	case 12:
		{
			yyVAL.op = ops.Release(yyS[yypt-2].op, yyS[yypt-0].op)
		}
	case 13:
		{
			yyVAL.op = ops.Then(yyS[yypt-2].op, yyS[yypt-0].op)
		}

	}

	if yyEx != nil && yyEx.Reduced(r, exState, &yyVAL) {
		return -1
	}
	goto yystack /* stack new state and value */
}

func setOp(l yyLexer, op ltl.Operator) {
	l.(*Lexer).op = op
}

type yyLex struct {
	s   string
	pos int
}

// ParseLTL parses an expression, lexed by the provided Lexer, into an LTL
// Operator.
func ParseLTL(l *Lexer) (ltl.Operator, error) {
	yyErrorVerbose = true
	p := &yyParserImpl{}
	p.Parse(l)
	return l.op, l.err
}
